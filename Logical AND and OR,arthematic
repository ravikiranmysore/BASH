#Logical and and OR
#age=25
#age=50 # this will throw second condition
#&& or -a flag(and operator)

#if [ "$age" -gt 18 ] && [ "$age" -lt 30 ] #never forget the space before and after [ ]

age=25
if [ "$age" -gt 18 -a "$age" -lt 30 ]
then
 echo "Valid age"
else
 echo "Age not valid"
fi


#another way
age=60
if [[ "$age" -gt 18 && "$age" -lt 30 ]] #pay attension
then
 echo "Valid age"
else
 echo "Age not valid"
fi


age=25
#1.if [ "$age" -eq 18 ] || [ "$age" -eq 30 ]
#2.if [ "$age" -eq 18 -o "$age" -eq 30 ] # valid
#3.
if [[ "$age" -eq 18 || "$age" -eq 30 ]]
then
 echo "Valid age"
else
 echo "Age not valid"
fi

#! /bin/bash

#arithematic operator
num1=20
num2=5
echo $num1 + $num2 = $(( num1 + num2 ))
echo $num1 - $num2 = $(( num1 - num2 ))
#echo $num1 * $num2 = $(( num1 * num2 )) # output looks weird,to fix this
echo $num1 \* $num2 = $(expr $num1 \* $num2 ) 
echo $num1 / $num2 = $(( num1 / num2 ))
echo $num1 % $num2 = $(( num1 % num2 ))


echo $(expr $num1 \* $num2 )

#! /bin/bash

#arithematic operator
num1=20.5
num2=5

echo $num1 + $num2 = $(( num1 + num2 ))
echo $num1 - $num2 = $(( num1 - num2 ))
#echo $num1 * $num2 = $(( num1 * num2 )) # output looks weird,to fix this
echo $num1 \* $num2 = $(expr $num1 \* $num2 ) 
echo $num1 / $num2 = $(( num1 / num2 ))
echo $num1 % $num2 = $(( num1 % num2 ))


echo $(expr $num1 \* $num2 )

#arithematic operator for floating point number.
#you need to use tool

:'
num1=20.5
./hello.sh: line 6: 20.5: syntax error: invalid arithmetic operator (error token is ".5")
./hello.sh: line 7: 20.5: syntax error: invalid arithmetic operator (error token is ".5")
expr: non-integer argument
20.5 * 5 =
./hello.sh: line 10: 20.5: syntax error: invalid arithmetic operator (error token is ".5")
./hello.sh: line 11: 20.5: syntax error: invalid arithmetic operator (error token is ".5")
expr: non-integer argument

Use : ' to open and ' to close
'

#we must use bc

echo "20.5+5" | bc
# this will give output as 25.5

echo "" ######for next line

echo "20.5+5" | bc
echo "20.5-5" | bc
echo "20.5*5" | bc
echo "scale=20;20.5/5" | bc #up to 20 decimal points
echo "20.5%5" | bc

echo "new line here"

echo "$num1 + $num2" | bc
echo "$num1 - $num2" | bc
echo "20.5*5" | bc
echo "scale=20;20.5/5" | bc #up to 20 decimal points
echo "20.5%5" | bc

num=16

echo "   "

echo "scale=4;sqrt($num)" | bc -l
#to use math operation you need to use libary so use -l

echo " use man bc for more info   "
#for pow
echo "scale=4;3^3" | bc -l





